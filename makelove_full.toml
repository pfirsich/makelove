# vvvvvvvvvvvv You should probably specify the following values vvvvvvvvvvvv

# If the name is not specified it will use the containing directory's name
# or if the current directory is a part of a git repository, it will use the name of
# the directory containing the git repository.
# Specify this!
name = "Amazing Game"

# These are the files included in the .love file.
# The patterns are evaluated in the order they are specified. If they start with "-" they
# remove matching files from the current set of files. If they start with "+" or neither
# "+" nor "-", they will add matching files to the current set.
# The patterns use Python's fnmatch (which does not set FNM_PATHNAME), so asterisk
# will match slashes! I admit that these patterns behave a little weirdly.
# If you want to match a file in the root of the game directory, you need to do "./file"!
# "./" is prepended to all paths, so you can use "*/foobar" to match foobar in all directories,
# because "*foobar" would match "foofoobar" also.
# You can also specify a magic value called "::git-ls-tree::" which expands to all files
# tracked by git.
# The following is the default if the current working directory is in a git repository:
love_files = [
    "::git-ls-tree::",
    "-*/.*", # don't include hidden files
]
# If the current directory is not in a git repository, love_files will use all files
# in the current working directory except hidden files and the build directory.

# vvvvvvvvvvvv You may want to specify these too vvvvvvvvvvvv

# This version is optional and will be read from conf.lua, if possible.
# This is usually good enough and you do not need to specify this.
love_version = "11.3"

# The targets specified here are used if no targets are passed when makelove is invoked.
# If you are on Linux, the default value is ["win32", "win64", "appimage"]
# If you are on another OS, the default value is ["win32", "win64"]
default_targets = ["win32", "win64", "appimage", "lovejs", "macos"] # <- possible values for now

# By default this is "makelove-build"
build_directory = "bauwerke"

# This icon file will be used for the executables and the appimage.
# The executable requires an .ico or a file that can be read by Pillow (Python library).
# The appimage requires a .png, an .svg or anything Pillow can load.
icon_file = "icon.png"

# After the game directory file have been assembled and the .love file has been created
# the temporary game directory will be deleted, unless this parameter is true
keep_game_directory = false

# This specifies the files to be included in the zip archives generated for windows builds.
# The key is the relative (to the game directory) source path
# and the value is the destination path relative to the archive root.
# You may specify files or directories
[archive_files]
"foo/bar/README.md" = "README.md"
"baz/baz/licenses" = "licenses" # directory
".itch.toml" = ".itch.toml"

[hooks]
# Both hooks are a list of commands to be executed. They use the default shell.
# For more information, see the README.md
prebuild = [
	"./generate_changelog.py",
	"./generate_builddata.py",
]
postbuild = [
	# {build_directory} and {version} will be replaced
	# This is obviously only for illustrative purposes, you will probaly want to wrap this in a script
	"butler push {build_directory}/win32/SuperGame-win32.zip pfirsich/supergame:win32 --userversion {version}",
]

[hooks.parameters]
# This section will not be checked when the config is validated and may contain
# anything. It is intended as a place for configuration for your hooks.

[windows]
# This is the same as archive_files at the top level, but will be added to the archive additionally
[windows.archive_files]

# Exe metadata is specified as a version string (key) and it's value
# The values shown here are the ones set by makelove by default (you can overwrite them here)
# and the values in the comments are the original values in love.exe
# If you are not doing a versioned build, {version} is empty.
[windows.exe_metadata]
FileDescription = "{name} {version}" # "LÖVE {löve version}"
FileVersion = "{version}" # "{löve version}"
CompanyName = "" # "LÖVE World Domination Inc."
LegalCopyright = "" # "Copyright © 2006-2020 LÖVE Development Team" or ""
ProductName = "{name}" # "LÖVE"
ProductVersion = "<same as FileVersion>"
OriginalFilename = "<name of the generated .exe>" # "love.exe"

[win32]
# This points to a directory containing an unpacked löve zip, just like official
# ones distributed on the löve website (containing an .exe, a bunch of .dlls).
love_binaries = "/home/joel/Downloads/love-0.10.2-win32"

# This is a list of local paths to .dlls that are either loaded as Lua modules of via FFI
# and that need to be included in the archive.
shared_libraries = [
	"enet2/enet2.dll",
	"libcurl.dll"
]

# This is either a single string value or a list of the possible values "archive" and "directory"
# If "archive" is specified a .zip file containing the fused exe, the archive files,
# .dlls and everything else is produced.
# If "directory" is specified a directory with the same contents is created.
# The default value of only "archive" implies that the directory will be deleted
# after the .zip has been built.
artifacts = "archive"

# The values above for the target win32 can also be set for the win64 target

[macos]
# optionally, you can include a mac-specific icon, if not mac will use the same icon as other targets
icon_file = "macIcon.png"  # or macIcon.icns

[macos.app_metadata]
CFBundleName = "<same as the name from the main config>"
CFBundleIdentifier = "tld.yourgamename"
NSHumanReadableCopyright = "Copyright © 2006-2020 LÖVE Development Team"
CFBundleShortVersionString = "{version}"

[linux]
# These values are included in the .desktop file
[linux.desktop_file_metadata]
Comment="Scary game about finding teeth in odd places"
Categories="Education;Science;" # Default is "Game;" (semicolon is separator and terminator)

[appimage]
# makelove will turn a löve AppImage into an AppImage of your game as described in the
# https://github.com/pfirsich/love-appimages README
# If a custom AppImage is to be used, you can specify it here
source_appimage = "love_custom.AppImage"

# As with windows, this is a list of .so files to include in the AppImage
shared_libraries = [
	"enet2/enet2.so",
	"/lib/x86_64-linux-gnu/libcurl.so",
]

# See win32.artifacts and win64.artifacts.
# for appimage the possible values are: "appimage" and "appdir",
# where "appdir" is the AppDir the AppImage is generated from.
artifacts = "appimage" # default is to delete the AppDir

[lovejs]
title = "Amazing Game"  # used on the resulting web page
memory = "20000000"  # starting memory of the webpage (default is 20 MB)
